Developting Data Products Project Present
========================================================
author: Ziwen Yu
date: `r date()`

Overview
========================================================

Community detection is a very important part in network analysis. In this present, the fast greedy community detection algorithm is introducted.

Structure of presentation
- Building network
- Applying fast greedy algorithm
- Dispalying results

Building Network
========================================================
A demo network in this presentation is defined as 20 nodes and 60 links. The relationships are randomly defined.
```{r results='hide'}
libs=c('igraph','plyr','dplyr','magrittr')
lapply(libs,library,character.only=T)
Nd= 20 #number of nodes
Lnk=60 #number of links
Links=data.frame(
      source=base::sample(seq(1:Nd),
                          Lnk,
                          replace=T),
      target=base::sample(seq(1:Nd),
                          Lnk,
                          replace=T))

NtDt=Links %>%
      graph.data.frame(.,directed=F) %>%
      simplify(.,edge.attr.comb="sum")
```

Applying fast greedy algorithm 
========================================================

```{r}
Comm=fastgreedy.community(NtDt)  #Community Detection
#Plot Attributes
V(NtDt)$color=Comm$membership
V(NtDt)$size=degree(NtDt)*5
V(NtDt)$label.cex = 1
```

Dispalying results
========================================================

```{r echo=FALSE}
layout.modular <- function(G,c){
                  nm <- length(levels(as.factor(c$membership)))
                  gr <- 2
                  while(gr^2<nm){
                        gr <- gr+1
                  }
                  i <- j <- 0
                  for(cc in levels(as.factor(c$membership))){
                        F <- delete.vertices(G,c$membership!=cc)
                        
                        F$layout <- layout.kamada.kawai(F)
                        F$layout <- layout.norm(F$layout, i,i+0.5,j,j+0.5)
                        G$layout[c$membership==cc,] <- F$layout
                        if(i==gr){
                              i <- 0
                              if(j==gr){
                                    j <- 0
                              }else{
                                    j <- j+1
                              }
                        }else{
                              i <- i+1
                        }
                  }
                  return(G$layout)
            }
            
            NtDt$layout =layout.fruchterman.reingold(NtDt)
            NtDt$layout <- layout.modular(NtDt,Comm)
            
            V(NtDt)$color <- rainbow(length(levels(as.factor(Comm$membership))))[Comm$membership]
            
            
            plot(NtDt,
                 vertex.color = adjustcolor(V(NtDt)$color, alpha.f = .5), 
                 vertex.label.color = adjustcolor("black", .5))
```

